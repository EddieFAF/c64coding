// Some constants
.var C64Cartridge_Lo_8K  = $8000
.var C64Cartridge_Hi_8K  = $e000
.var VIC2_Bank0  = $0000
.var VIC2_Bank1  = $4000
.var VIC2_Bank2  = $8000
.var VIC2_Bank3  = $c000
.var kSize_8K    = 8 * 1024
.var kSize_16K   = 8 * 1024


// Zero page

// Each enabled bit sets read and write on the processor port (ZPProcessorPort) otherwise the value can just be read.
// Default: $2F, %101111
.var ZPProcessorPortDDR              = $00
.var ProcessorPortDDRDefault         = %101111

// Bits 0-2: Configuration for memory areas $A000-$BFFF, $D000-$DFFF and $E000-$FFFF. Values:
// %x00: RAM visible in all three areas.
// %x01: RAM visible at $A000-$BFFF and $E000-$FFFF.
// %x10: RAM visible at $A000-$BFFF// KERNAL ROM visible at $E000-$FFFF.
// %x11: BASIC ROM visible at $A000-$BFFF// KERNAL ROM visible at $E000-$FFFF.
// %0xx: Character ROM visible at $D000-$DFFF. (Except for the value %000, see above.)
// %1xx: I/O area visible at $D000-$DFFF. (Except for the value %100, see above.)
// Bit 3: Datasette output signal level.
// Bit 4: Datasette button status// 0 = One or more of PLAY, RECORD, F.FWD or REW pressed// 1 = No button is pressed.
// Bit 5: Datasette motor control// 0 = On// 1 = Off.
// Default: $37, %110111
.var ZPProcessorPort                 = $01
.var ProcessorPortDefault            = %110111
.var ProcessorPortAllRAMWithIO       = %100101
.var ProcessorPortAllRAM             = %100000
.var ProcessorPortKERNALWithIO       = %100110

// $02 - $06 are unused (apparently).

// $07 - $2a are only really used during BASIC execution.

// By default contains $0801
.var ZPStartBasicLo                  = $2b
.var ZPStartBasicHi                  = $2c

.var ZPStartVariableLo               = $2d
.var ZPStartVariableHi               = $2e

.var ZPStartArrayVariableLo          = $2f
.var ZPStartArrayVariableHi          = $30

.var ZPEndArrayVariableLo            = $31
.var ZPEndArrayVariableHi            = $32

.var ZPStartStringVariableLo         = $33
.var ZPStartStringVariableHi         = $34

.var ZPCurrentStringVariableLo       = $35
.var ZPCurrentStringVariableHi       = $36

.var ZPEndBasicLo                    = $37
.var ZPEndBasicHi                    = $38

// $39 - $72 are only really used during BASIC execution.

// $73 - $8a
.var ZPChrGet                        = $73

// $8b - $8f are only really used during BASIC execution.

// Also used for datasette status
// READST uses this for disk access
.var ZPSTVariable                    = $90

.var ZPStopKeyIndicator              = $91
.var ZPDatasetteTiming               = $92
.var ZPLoadVerify                    = $93
.var ZPSerialBusCacheStatus          = $94
.var ZPSerialBusCache                = $95
.var ZPDatasetteEndOfTape            = $96
.var ZPRS232XYTemp                   = $97
.var ZPNumFilesOpen                  = $98
.var ZPCurrentInputDevice            = $99
.var ZPCurrentOutputDevice           = $9a
.var ZPDatasetteParity               = $9b
.var ZPDatasetteByteReady            = $9c
.var ZPDisplaySystemErrorSwitch      = $9d
.var ZPRS232OutByte                  = $9e
.var ZPDatasetteNameWriteCount       = $9f
.var ZPTimeOfDay                     = $a0       // $a0 - a2
.var ZPEOISerialBusSwitch            = $a3
.var ZPSerialBusBuffer               = $a4
.var ZPSerialBusBitCounter           = $a5
.var ZPDatasetteBufferOffset         = $a6
.var ZPRS232BusBuffer                = $a7
.var ZPRS232BusBitCounter            = $a8
.var ZPRS232StopBitSwitch            = $a9
.var ZPRS232ByteBuffer               = $aa
.var ZPRS232Parity                   = $ab
.var ZPAddressToSave                 = $ac       // $ac - ad
.var ZPAddressToLoad                 = $ae       // $ae - af

// $b0 - $b1 Tape timing constants
.var ZPTapeTimingConstant

.var ZPDatasetteBufferLo             = $b2
.var ZPDatasetteBufferHo             = $b3
.var ZPRS232BitCounter               = $b4
.var ZPRS232BitBuffer                = $b5

.var ZPCurrentFileDeviceNumber       = $ba       // Usually the last used device to load a file.

// $b7 - $c4 Various file operation working area

.var ZPPrevKeyPressed                = $c5
.var ZPKeyBufferLength               = $c6

// $c7 - $ca Various cursor operations

.var ZPCurrentKeyPressed             = $cb

// $cc - $f6 Various cursor, screen and keyboard conversion tables
.var ZPFlagCursorFlash               = $cc

// $f7 - $fa RS232 input and output buffers
.var RS232InputBufferLo              = $f7
.var RS232InputBufferHi              = $f8
.var RS232OutputBufferLo             = $f9
.var RS232OutputBufferHi             = $fa

// $fb - $fe unused

.var ProcessorStack                  = $0100     // $0100 - $01ff

// $0200 - $0292 Various keyboard buffers and buffers used by BASIC
.var EZPFlagFlagRepeatKeys           = $028a     // 0 = no repeat (default). $ff = repeat all.
.var EZPFlagUpperLowerCaseChange     = $0291     // $80 = Keyboard or chr$(8) does not change upper/lower case

// $0293 - $02ff RS232 and datasette control and buffers

// $0300 - $0312 Used by BASIC

// $0313 unused

.var DefaultIRQServiceRoutine        = $ea31
.var MinimalIRQServiceRoutine        = $ea81
.var IRQServiceRoutineLo             = $0314
.var IRQServiceRoutineHi             = $0315

// Default = $fe66
.var BRKServiceRoutineLo             = $0316
.var BRKServiceRoutineHi             = $0317

.var DefaultNMIServiceRoutine        = $fe47
.var NMIServiceRoutineLo             = $0318
.var NMIServiceRoutineHi             = $0319

.var DefaultSTOPVector               = $f6ed
.var STOPVectorLo                    = $0328
.var STOPVectorHi                    = $0329

// $031a - $0333 Various vectors for standard routines like open, close, load, save etc

.var DefaultLOADRoutine              = $f4a5
.var LoadRoutineLo                   = $0330
.var LoadRoutineHi                   = $0331

.var DefaultSaveRoutine              = $f5ed
.var SaveRoutineLo                   = $0332
.var SaveRoutineHi                   = $0333

// $0334 - $033b unused

// $033c - $03fb Datasette buffer

// $03fc - $03ff unused



// Special memory sections

.var BASICSTART= $0801           // Default is memory PEEK(43) = 1 and PEEK(44) = 8
// The offset from the start of screen data for the sprite definitions
.var SPRITEFRAMESCROFF = $03f8
.var SCREENRAM = $0400
.var SPRITEFRAME = SCREENRAM + SPRITEFRAMESCROFF
.var BASICROM  = $A000
.var VIC       = $D000
.var SID       = $D400
.var COLORRAM  = $D800
.var COLOURRAM = $D800
.var CIA1      = $DC00
.var CIA2      = $DD00
.var KERNALROM = $E000

.var BASICTextPrint = $ab1e

// KERNAL routines

.var CLRSCR      = $e544
.var HEADERex    = $F76A

.var ACPTR   = $FFA5
.var CHKIN   = $FFC6
.var CHKOUT  = $FFC9
.var CHRIN   = $FFCF
.var CHROUT  = $FFD2
.var CIOUT   = $FFA8
.var CINT    = $FF81
.var CLALL   = $FFE7
.var CLOSE   = $FFC3
.var CLRCHN  = $FFCC
.var GETIN   = $FFE4
.var IOBASE  = $FFF3
.var IOINIT  = $FF84
.var LISTEN  = $FFB1
.var LOAD    = $FFD5
.var MEMBOT  = $FF9C
.var MEMTOP  = $FF99
.var OPEN    = $FFC0
.var PLOT    = $FFF0
.var RAMTAS  = $FF87
.var RDTIM   = $FFDE
.var READST  = $FFB7
.var RESTOR  = $FF8A
.var SAVE    = $FFD8
.var SCNKEY  = $FF9F
.var SCREEN  = $FFED
.var SECOND  = $FF93
.var SETLFS  = $FFBA
.var SETMSG  = $FF90
.var SETNAM  = $FFBD
.var SETTIM  = $FFDB
.var SETTMO  = $FFA2
.var STOP    = $FFE1
.var TALK    = $FFB4
.var TKSA    = $FF96
.var UDTIM   = $FFEA
.var UNLSN   = $FFAE
.var UNTLK   = $FFAB
.var VECTOR  = $FF8D

// KERNAL Vectors

// Default = $fe43
.var KERNALNMIServiceRoutineLo       = $fffa
.var KERNALNMIServiceRoutineHi       = $fffb

// Default = $fce2
.var KERNALColdStartResetLo          = $fffc
.var KERNALColdStartResetHi          = $fffd

// Default = $ff48
.var KERNALIRQServiceRoutineLo       = $fffe
.var KERNALIRQServiceRoutineHi       = $ffff

// Specific locations within the custom chips

// VIC II Video chip
.var VIC2Sprite0X                    = $d000
.var VIC2Sprite0Y                    = $d001
.var VIC2Sprite1X                    = $d002
.var VIC2Sprite1Y                    = $d003
.var VIC2Sprite2X                    = $d004
.var VIC2Sprite2Y                    = $d005
.var VIC2Sprite3X                    = $d006
.var VIC2Sprite3Y                    = $d007
.var VIC2Sprite4X                    = $d008
.var VIC2Sprite4Y                    = $d009
.var VIC2Sprite5X                    = $d00a
.var VIC2Sprite5Y                    = $d00b
.var VIC2Sprite6X                    = $d00c
.var VIC2Sprite6Y                    = $d00d
.var VIC2Sprite7X                    = $d00e
.var VIC2Sprite7Y                    = $d00f

// Each bit is the X MSB for each sprite.
.var VIC2SpriteXMSB                  = $d010

// Bits 0-2 Vertical scroll.
// 3 Screen height 0 = 24 rows last line 246 (f6) : 1 = 25 rows last line $fa (250)
// 4 0 = Screen off 1 = Screen on
// 5 0 = Text mode 1 = Bitmap mode
// 6 1 = Extended background mode on
// 7 Read: Current raster line position bit 9. Write: Bit 9 of raster line position to generate next interrupt.
// Default: $1b, %00011011
.var VIC2ScreenControlVDefault       = %00011011
.var VIC2ScreenControlV              = $d011

// Read: Current raster line position.
// Write: Raster line position to generate next interrupt. Bit 9 in VIC2ScreenControlV must be correct before writing this register.
.var VIC2Raster                      = $d012
.var VIC2LightPenX                   = $d013
.var VIC2LightPenY                   = $d014
.var VIC2SpriteEnable                = $d015

// Bits 0-2 Horizontal scroll.
// 3 Screen width 0 = 38 columns 1 = 40 columns
// 4 1 = Multicolour on
// 5-7 Unused
// Default: $c8, %11001000
.var VIC2ScreenControlHDefault       = %11001000
.var VIC2ScreenControlH              = $d016

.var VIC2ScreenCharsWidth            = 40
.var VIC2ScreenCharsHeight           = 25

// Each bit sets the double height enable for each sprite.
.var VIC2SpriteDoubleHeight          = $d017

// In text mode:
// Bit 0 is unused
// Bits 1-3 Character memory location * $0800 (2048) inside current VIC bank selected by $dd00.
// In VIC bank 0 and 2 bits %010 ($4) and %011 ($6) select character ROM (CHARGEN) except in ULTIMAX mode.
// In bitmap mode:
// Bit 3 Bitmap memory location * $2000 (8192) inside current VIC bank selected by $dd00.
// Bits 4-7 Screen memory location * $0400 (1024)  inside current VIC bank selected by $dd00.
// Default: $15, %00010101
.var VIC2MemorySetupDefault          = %00010101
.var VIC2MemorySetup                 = $d018

.var VIC2MemorySetup_CharsSize       = $800
.var VIC2MemorySetup_ScreenSize      = $400
.var VIC2MemorySetup_SpriteSize      = $40


// Read:
// Bit 0: 1 = Current raster line is equal to the raster line which is set to generate an interrupt.
// Bit 1: 1 = Sprite-background collision event.
// Bit 2: 1 = Sprite-sprite collision event.
// Bit 3: 1 = Light pen signal received.
// Bit 7: 1 = An event that might generate an interrupt happened.
// Write:
// Bit 0: 1 = Ack raster interrupt.
// Bit 1: 1 = Ack sprite-background collision interrupt.
// Bit 2: 1 = Ack sprite-sprite collision interrupt.
// Bit 3: 1 = Ack light pen signal interrupt.
// Note: While "dec VIC2InteruptStatus" works on the C64 it doesn't work on the C65 in C64 mode. Use: "+MACROAckRasterIRQ_A" or "lda #1 sta VIC2InteruptStatus" to ack just the raster IRQ or "lda VIC2InteruptStatus sta VIC2InteruptStatus" to ack all IRQs
// http://noname.c64.org/csdb/forums/index.php?roomid=11&topicid=39331&firstpost=2
.var VIC2InteruptStatus              = $d019

// Bit 0: 1 = Raster interrupt enabled.
// Bit 1: 1 = Sprite-background interrupt enabled.
// Bit 2: 1 = Sprite-sprite interrupt enabled.
// Bit 3: 1 = Light pen interrupt enabled.
.var VIC2InteruptControl             = $d01a

// Each bit sets the sprite background priority for each sprite.
// 0 = Sprite drawn in front of screen contents.
// 1 = Sprite drawn behind of screen contents.
.var VIC2SpritePriority              = $d01b

// Each bit sets multicolour for each sprite.
// 0 = Sprite is single colour.
// 1 = Sprite is multicolour.
.var VIC2SpriteMulticolour           = $d01c

// Each bit sets the double width enable for each sprite.
.var VIC2SpriteDoubleWidth           = $d01d

// Read: For each set bit X the sprite X collided with another sprite.
// Write: For each set bit X allow further sprite-sprite collisions.
.var VIC2SpriteSpriteCollision       = $d01e

// Read: For each set bit X the sprite X collided with the background.
// Write: For each set bit X allow further sprite-background collisions.
.var VIC2SpriteBackgroundCollision   = $d01f

.var VIC2BorderColour                = $d020
.var VIC2ScreenColour                = $d021

.var VIC2ExtraBackgroundColour1      = $d022
.var VIC2ExtraBackgroundColour2      = $d023
.var VIC2ExtraBackgroundColour3      = $d024

.var VIC2ExtraSpriteColour1          = $d025
.var VIC2ExtraSpriteColour2          = $d026

.var VIC2Sprite0Colour               = $d027
.var VIC2Sprite1Colour               = $d028
.var VIC2Sprite2Colour               = $d029
.var VIC2Sprite3Colour               = $d02a
.var VIC2Sprite4Colour               = $d02b
.var VIC2Sprite5Colour               = $d02c
.var VIC2Sprite6Colour               = $d02d
.var VIC2Sprite7Colour               = $d02e

// The colour values
.var VIC2Colour_Black        = 0
.var VIC2Colour_White        = 1
.var VIC2Colour_Red          = 2
.var VIC2Colour_Cyan         = 3
.var VIC2Colour_Purple       = 4
.var VIC2Colour_Green        = 5
.var VIC2Colour_Blue         = 6
.var VIC2Colour_Yellow       = 7
.var VIC2Colour_Orange       = 8
.var VIC2Colour_Brown        = 9
.var VIC2Colour_LightRed     = 10
.var VIC2Colour_DarkGrey     = 11
.var VIC2Colour_Grey         = 12
.var VIC2Colour_LightGreen   = 13
.var VIC2Colour_LightBlue    = 14
.var VIC2Colour_LightGrey    = 15

.var VIC2Multicolour_Black   = 8
.var VIC2Multicolour_White   = 9
.var VIC2Multicolour_Red     = 10
.var VIC2Multicolour_Cyan    = 11
.var VIC2Multicolour_Purple  = 12
.var VIC2Multicolour_Green   = 13
.var VIC2Multicolour_Blue    = 14
.var VIC2Multicolour_Yellow  = 15


// Other constant values related to the VIC2
// Unexpanded sprite sizes
.var VIC2SpriteSizeX = 24
.var VIC2SpriteSizeY = 21
// The left most position for a 40 column wide screen where the sprite is completely visible
.var VIC2SpriteXBorderLeft = 24
// The left most position for a 38 column wide screen where the sprite is completely visible
.var VIC2SpriteXBorderLeft38 = 31
// The right most sprite position for a 40 column wide screen where it is completely hidden by the border
.var VIC2SpriteXBorderRight = 256+88
// The top most position for a 25 row screen where the sprite is completely visible
.var VIC2SpriteYBorderTop = 50
// The top most position for a 24 row screen where the sprite is completely visible
.var VIC2SpriteYBorderTop24 = 54
// The bottom most position for a 25 row screen where the sprite is completely hidden by the border
.var VIC2SpriteYBorderBottom = 250


// SID Audio chip

.var SIDVoice1FreqLo                 = $d400     // Write only
.var SIDVoice1FreqHi                 = $d401     // Write only
.var SIDVoice1PulseWidthLo           = $d402     // Write only
.var SIDVoice1PulseWidthHi           = $d403     // Write only

// Bit 0: 0 = Voice off, release cycle. 1 = Voice on do attack-decay-sustain.
// Bit 1: 1 = Synchronization enable.
// Bit 2: 1 = Ring modulation enable.
// Bit 3: 1 = Test.
// Bit 4: 1 = Triangle waveform enable.
// Bit 5: 1 = Sawtooth waveform enable.
// Bit 6: 1 = Pulse waveform enable.
// Bit 7: 1 = Noise waveform enable.
.var SIDVoice1Control                = $d404     // Write only

// Bits 0-3 Decay length:
//   %0000, 0: 6 ms.
//   %0001, 1: 24 ms.
//   %0010, 2: 48 ms.
//   %0011, 3: 72 ms.
//   %0100, 4: 114 ms.
//   %0101, 5: 168 ms.
//   %0110, 6: 204 ms.
//   %0111, 7: 240 ms.
//   %1000, 8: 300 ms.
//   %1001, 9: 750 ms.
//   %1010, 10: 1.5 s.
//   %1011, 11: 2.4 s.
//   %1100, 12: 3 s.
//   %1101, 13: 9 s.
//   %1110, 14: 15 s.
//   %1111, 15: 24 s.
// Bits 4-7 Attack length:
//   %0000, 0: 2 ms.
//   %0001, 1: 8 ms.
//   %0010, 2: 16 ms.
//   %0011, 3: 24 ms.
//   %0100, 4: 38 ms.
//   %0101, 5: 56 ms.
//   %0110, 6: 68 ms.
//   %0111, 7: 80 ms.
//   %1000, 8: 100 ms.
//   %1001, 9: 250 ms.
//   %1010, 10: 500 ms.
//   %1011, 11: 800 ms.
//   %1100, 12: 1 s.
//   %1101, 13: 3 s.
//   %1110, 14: 5 s.
//   %1111, 15: 8 s.
.var SIDVoice1AttackDecay            = $d405     // Write only

// Bits 0-3 Release length.
//   %0000, 0: 6 ms.
//   %0001, 1: 24 ms.
//   %0010, 2: 48 ms.
//   %0011, 3: 72 ms.
//   %0100, 4: 114 ms.
//   %0101, 5: 168 ms.
//   %0110, 6: 204 ms.
//   %0111, 7: 240 ms.
//   %1000, 8: 300 ms.
//   %1001, 9: 750 ms.
//   %1010, 10: 1.5 s.
//   %1011, 11: 2.4 s.
//   %1100, 12: 3 s.
//   %1101, 13: 9 s.
//   %1110, 14: 15 s.
//   %1111, 15: 24 s.
// Bits #4-#7: Sustain volume.
.var SIDVoice1SustainRelease         = $d406     // Write only

.var SIDVoice2FreqLo                 = $d407     // Write only
.var SIDVoice2FreqHi                 = $d408     // Write only
.var SIDVoice2PulseWidthLo           = $d409     // Write only
.var SIDVoice2PulseWidthHi           = $d40a     // Write only
.var SIDVoice2Control                = $d40b     // Write only
.var SIDVoice2AttackDecay            = $d40c     // Write only
.var SIDVoice2SustainRelease         = $d40d     // Write only

.var SIDVoice3FreqLo                 = $d40e     // Write only
.var SIDVoice3FreqHi                 = $d40f     // Write only
.var SIDVoice3PulseWidthLo           = $d410     // Write only
.var SIDVoice3PulseWidthHi           = $d411     // Write only
.var SIDVoice3Control                = $d412     // Write only
.var SIDVoice3AttackDecay            = $d413     // Write only
.var SIDVoice3SustainRelease         = $d414     // Write only

.var SIDFilterCutoffFreqLo           = $d415     // Write only
.var SIDFilterCutoffFreqHi           = $d416     // Write only

// Bit 0: 1 = Voice #1 filtered.
// Bit 1: 1 = Voice #2 filtered.
// Bit 2: 1 = Voice #3 filtered.
// Bit 3: 1 = External voice filtered.
// Bits 4-7: Filter resonance.
.var SIDFilterControl                = $d417     // Write only

// Bits 0-3: Volume.
// Bit 4: 1 = Low pass filter enabled.
// Bit 5: 1 = Band pass filter enabled.
// Bit 6: 1 = High pass filter enabled.
// Bit 7: 1 = Voice #3 disabled.
.var SIDVolumeFilter                 = $d418     // Write only

// Paddle is selected by memory address $dd00
.var SIDPaddleX                      = $d419     // Read only

// Paddle is selected by memory address $dd00
.var SIDPaddleY                      = $d41a     // Read only

.var SIDVoice3WaveformOutput         = $d41b     // Read only
.var SIDVoice3ADSROutput             = $d41c     // Read only



// CIA1

.var JoystickBits_Up     = %1
.var JoystickBits_Down   = %10
.var JoystickBits_Left   = %100
.var JoystickBits_Right  = %1000
.var JoystickBits_Fire   = %10000

.var JoystickBits_AllDirections = JoystickBits_Up | JoystickBits_Down | JoystickBits_Left | JoystickBits_Right

// Port A read:
// Bit 0: 0 = Port 2 joystick up pressed.
// Bit 1: 0 = Port 2 joystick down pressed.
// Bit 2: 0 = Port 2 joystick left pressed.
// Bit 3: 0 = Port 2 joystick right pressed.
// Bit 4: 0 = Port 2 joystick fire pressed.
// Write:
// Bit x: 0 = Select keyboard matrix column x.
// Bits 6-7: Paddle selection// %01 = Paddle #1// %10 = Paddle #2.
.var CIA1KeyboardColumnJoystickA     = $dc00

// Port B, keyboard matrix rows and joystick #1. Bits:
// Bit x: 0 = A key is currently being pressed in keyboard matrix row #x, in the column selected at memory address $DC00.
// Bit 0: 0 = Port 1 joystick up pressed.
// Bit 1: 0 = Port 1 joystick down pressed.
// Bit 2: 0 = Port 1 joystick left pressed.
// Bit 3: 0 = Port 1 joystick right pressed.
// Bit 4: 0 = Port 1 joystick fire pressed.
.var CIA1KeyboardRowsJoystickB       = $dc01

// Each enabled bit sets read and write on CIA1KeyboardColumnJoystickA otherwise the value can just be read.
.var CIA1PortADDR                    = $dc02

// Each enabled bit sets read and write on CIA1KeyboardRowsJoystickB otherwise the value can just be read.
.var CIA1PortBDDR                    = $dc03

.var CIA1TimerALo                    = $dc04
.var CIA1TimerAHi                    = $dc05

.var CIA1TimerBLo                    = $dc06
.var CIA1TimerBHi                    = $dc07

.var CIA1ToD10thSecsBCD              = $dc08
.var CIA1ToDSecsBCD                  = $dc09
.var CIA1ToDMinsBCD                  = $dc0a
.var CIA1ToDHoursBCD                 = $dc0b
.var CIA1SerialShift                 = $dc0c

// Interrupt control and status register.
// Read bits:
// Bit 0: 1 = Timer A underflow occurred.
// Bit 1: 1 = Timer B underflow occurred.
// Bit 2: 1 = TOD is equal to alarm time.
// Bit 3: 1 = A complete byte has been received into or sent from serial shift register.
// Bit 4: Signal level on FLAG pin, datasette input.
// Bit 7: An interrupt has been generated.
// Write bits:
// Bit 0: 1 = Enable interrupts generated by timer A underflow.
// Bit 1: 1 = Enable interrupts generated by timer B underflow.
// Bit 2: 1 = Enable TOD alarm interrupt.
// Bit 3: 1 = Enable interrupts generated by a byte having been received/sent via serial shift register.
// Bit 4: 1 = Enable interrupts generated by positive edge on FLAG pin.
// Bit 7: Fill bit// bits 0-6, that are set to 1, get their values from this bit// bits 0-6, that are set to 0, are left unchanged.
// Writing $7f will disable all interrupts generated by this CIA.
.var CIA1InterruptControl            = $dc0d

// Timer A control register. Bits:
// Bit 0: 0 = Stop timer// 1 = Start timer.
// Bit 1: 1 = Indicate timer underflow on port B bit 6.
// Bit 2: 0 = Upon timer underflow, invert port B bit 6// 1 = upon timer underflow, generate a positive edge on port B bit 6 for 1 system cycle. 
// Bit 3: 0 = Timer restarts upon underflow// 1 = Timer stops upon underflow.
// Bit 4: 1 = Load start value into timer.
// Bit 5: 0 = Timer counts system cycles// 1 = Timer counts positive edges on CNT pin.
// Bit 6: Serial shift register direction// 0 = Input, read// 1 = Output, write.
// Bit 7: TOD speed// 0 = 60 Hz// 1 = 50 Hz.
.var CIA1TimerAControl               = $dc0e

// Timer B control register. Bits:
// Bit 0: 0 = Stop timer// 1 = Start timer.
// Bit 1: 1 = Indicate timer underflow on port B bit 7.
// Bit 2: 0 = Upon timer underflow, invert port B bit 7// 1 = upon timer underflow, generate a positive edge on port B bit 7 for 1 system cycle.
// Bit 3: 0 = Timer restarts upon underflow// 1 = Timer stops upon underflow.
// Bit 4: 1 = Load start value into timer.
// Bits 5-6: %00 = Timer counts system cycles// %01 = Timer counts positive edges on CNT pin// %10 = Timer counts underflows of timer A// %11 = Timer counts underflows of timer A occurring along with a positive edge on CNT pin.
// Bit 7: 0 = Writing into TOD registers sets TOD// 1 = Writing into TOD registers sets alarm time.
.var CIA1TimerBControl               = $dc0f


// CIA2. Mostly the same as CIA1 except for VIC bank, no datasette, RS232 and generates NMI instead of IRQ.

// Bits 0-1: VIC bank. Values:
// %00, 0: Bank 3, $C000-$FFFF, 49152-65535.
// %01, 1: Bank 2, $8000-$BFFF, 32768-49151.
// %10, 2: Bank 1, $4000-$7FFF, 16384-32767.
// %11, 3: Bank 0, $0000-$3FFF, 0-16383.
// Bit 2: RS232 TXD line, output bit.
// Bit 3: Serial bus ATN OUT// 0 = High// 1 = Low.
// Bit 4: Serial bus CLOCK OUT// 0 = High// 1 = Low.
// Bit 5: Serial bus DATA OUT// 0 = High// 1 = Low.
// Bit 6: Serial bus CLOCK IN// 0 = High// 1 = Low.
// Bit 7: Serial bus DATA IN// 0 = High// 1 = Low.
.var CIA2PortASerialBusVICBank       = $dd00
.var CIA2PortASerialBusVICBankDefault= %11
.var CIA2PortASerialBusVICBankMask   = $3fff

// Read bits:
// Bit 0: RS232 RXD line, input bit.
// Bit 3: RS232 RI line.
// Bit 4: RS232 DCD line.
// Bit 5: User port H pin.
// Bit 6: RS232 CTS line// 1 = Sender is ready to send.
// Bit 7: RS232 DSR line// 1 = Receiver is ready to receive.
// Write bits:
// Bit 1: RS232 RTS line. 1 = Sender is ready to send.
// Bit 2: RS232 DTR line. 1 = Receiver is ready to receive.
// Bit 3: RS232 RI line.
// Bit 4: RS232 DCD line.
// Bit 5: User port H pin.
.var CIA2PortBRS232                  = $dd01

// Each enabled bit sets read and write on CIA2PortASerialBusVICBank otherwise the value can just be read.
.var CIA2PortADDR                    = $dd02

// Each enabled bit sets read and write on CIA2PortBRS232 otherwise the value can just be read.
.var CIA2PortBDDR                    = $dd03

.var CIA2TimerALo                    = $dd04
.var CIA2TimerAHi                    = $dd05

.var CIA2TimerBLo                    = $dd06
.var CIA2TimerBHi                    = $dd07

.var CIA2ToD10thSecsBCD              = $dd08
.var CIA2ToDSecsBCD                  = $dd09
.var CIA2ToDMinsBCD                  = $dd0a
.var CIA2ToDHoursBCD                 = $dd0b
.var CIA2SerialShift                 = $dd0c

// Non-maskable interrupt control and status register.
// Read bits:
// Bit 0: 1 = Timer A underflow occurred.
// Bit 1: 1 = Timer B underflow occurred.
// Bit 2: 1 = TOD is equal to alarm time.
// Bit 3: 1 = A complete byte has been received into or sent from serial shift register.
// Bit 4: Signal level on FLAG pin.
// Bit 7: A non-maskable interrupt has been generated.
// Write bits:
// Bit 0: 1 = Enable non-maskable interrupts generated by timer A underflow.
// Bit 1: 1 = Enable non-maskable interrupts generated by timer B underflow.
// Bit 2: 1 = Enable TOD alarm non-maskable interrupt.
// Bit 3: 1 = Enable non-maskable interrupts generated by a byte having been received/sent via serial shift register.
// Bit 4: 1 = Enable non-maskable interrupts generated by positive edge on FLAG pin.
// Bit 7: Fill bit// bits 0-6, that are set to 1, get their values from this bit// bits 0-6, that are set to 0, are left unchanged.
// Writing $7f will disable all interrupts generated by this CIA.
.var CIA2InterruptControl            = $dd0d

// Timer A control register. Bits:
// Bit 0: 0 = Stop timer// 1 = Start timer.
// Bit 1: 1 = Indicate timer underflow on port B bit 6.
// Bit 2: 0 = Upon timer underflow, invert port B bit 6// 1 = upon timer underflow, generate a positive edge on port B bit 6 for 1 system cycle. 
// Bit 3: 0 = Timer restarts upon underflow// 1 = Timer stops upon underflow.
// Bit 4: 1 = Load start value into timer.
// Bit 5: 0 = Timer counts system cycles// 1 = Timer counts positive edges on CNT pin.
// Bit 6: Serial shift register direction// 0 = Input, read// 1 = Output, write.
// Bit 7: TOD speed// 0 = 60 Hz// 1 = 50 Hz.
.var CIA2TimerAControl               = $dd0e

// Timer B control register. Bits:
// Bit 0: 0 = Stop timer// 1 = Start timer.
// Bit 1: 1 = Indicate timer underflow on port B bit 7.
// Bit 2: 0 = Upon timer underflow, invert port B bit 7// 1 = upon timer underflow, generate a positive edge on port B bit 7 for 1 system cycle.
// Bit 3: 0 = Timer restarts upon underflow// 1 = Timer stops upon underflow.
// Bit 4: 1 = Load start value into timer.
// Bits 5-6: %00 = Timer counts system cycles// %01 = Timer counts positive edges on CNT pin// %10 = Timer counts underflows of timer A// %11 = Timer counts underflows of timer A occurring along with a positive edge on CNT pin.
// Bit 7: 0 = Writing into TOD registers sets TOD// 1 = Writing into TOD registers sets alarm time.
.var CIA2TimerBControl               = $dd0f

// Memory mapped registers (256 bytes) of optional external devices.
.var MemoryMappedIOArea1                 = $de00
// Memory mapped registers (256 bytes) of optional external devices.
.var MemoryMappedIOArea2                 = $df00

// Constants
.var CyclesPerSecondPALC64 = 985248



