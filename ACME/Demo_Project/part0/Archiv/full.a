;***********************************************************************
;**  Project Name: Loader                                             **
;**  ---------------------------------------------------------------  **
;**  Filename: loader.a                                               **
;**  ---------------------------------------------------------------  **
;**  Author (c): Eddie                                                **
;**  File Date: 2018-02-28                                            **
;***********************************************************************
; Beinhaltet aufgehenden Raster, einblenden des Textes, nach Space ausblenden

;Meine persönliche Reihenfolge ist anders.
; -Macros,
; -Includes von Daten mit fester Adresse (Musik, Grafik...)
;-Basic-Zeile und ein erstes bisschen Code wie Kopierschleifen o.Ä. dazu.
;-Dann für größere Funktionsblöcke, z.B. Diskroutinen, Zeichenroutinen, Raster-IRQs...:
; [ -Variablen
; -Unterprogramme: Deren lokale Variablen, dann der Code dazu
; -Der eigentliche Code]
; Und zu guter Letzt die Hauptroutine, die all die anderen Sachen verwendet.


!src "../macros.a" ; Stellt ein paar Macros bereit
!src "../variables.a" ; Sprungziele

;my Routine, that starts with a nice BASIC line
!macro der_text {
  !pet "faf world domination"
}
year = 1971
!src "../basicstart_template.a"

        jmp start

!src "../subroutines.a"


screen_init:
; ********************************
; ** Setzen der Farben
; ********************************
        ldx #$00
-       lda char_colors,x
        sta $D968,x
        lda char_colors+$18,x
        sta $D980,x
        inx
        bne -
        rts
        
sprite_init:        
; ********************************
; ** Spritedaten initialisieren ** 
; ********************************
		ldx #0 
-   	lda sprite1,X 
 		sta $0340,X 
 		inx 
 		cpx #63 
        bne -
        rts
        
sprite_set:
; ********************************
; ** Sprites einrichten         **
; ********************************
        lda #$03                ; Sprite 0+1 aktivieren
        sta SPRITEACTIV
        lda #$00                ; Schwarz
        sta SPRITE0COLOR        ; Farbe Sprite 0
        sta SPRITE1COLOR        ; Farbe Sprite 1
        lda #$0D
        sta $07f8               ; Sprite 0
        sta $07f9               ; Sprite 1
        ldx #$10                ; x
        ldy #117                ; y
        stx SPRITE0X
        sty SPRITE0Y
        ldx #$10
        ldy #138
        stx SPRITE1X
        sty SPRITE1Y
        lda #$03                ; Sprite 0+1 Ylarge
        sta SPRITEDOUBLEHEIGHT
        rts
        
sprite_move:
; **********************
; ** Text einblenden
; **********************
        dec spr_counter
        dec spr_counter
        bne sprite_move_loop
        ldx charpos
        cpx #$28
        bne +
        jmp raster_set_space
+       lda char_screen,x
        sta $0568,x
        lda char_screen+40,x
        sta $0590,x
        lda char_screen+80,x
        sta $05B8,x
        lda char_screen+120,x
        sta $05E0,x
        lda char_screen+160,x
        sta $0608,x
        lda char_screen+200,x
        sta $0630,x
        lda char_screen+240,x
        sta $0658,x

        lda #$08
        sta spr_counter
        inc charpos
sprite_move_loop:
        inc SPRITE0X
        inc SPRITE0X
        inc SPRITE1X
        inc SPRITE1X
        bne +
        lda #$03
        sta $d010
+       rts        

sprite_back:
; **********************
; ** Text ausblenden
; **********************
        dec spr_counter
        dec spr_counter
        bne sprite_back_loop
        ldx charpos
        cpx #$00
        bne +
        jmp sprite_set_rts 
+       lda #$20
        sta $0568,x
        sta $0590,x
        sta $05B8,x
        sta $05E0,x
        sta $0608,x
        sta $0630,x
        sta $0658,x

        lda #$08
        sta spr_counter
        dec charpos
sprite_back_loop
        dec SPRITE0X
        dec SPRITE0X
        dec SPRITE1X
        dec SPRITE1X
        bne +
        lda #$00
        sta $d010
+       rts        

sprite_set_back:
; **********************
; ** Setze Zeichen löschen
; **********************
        lda #<sprite_back
        sta sprite_change_2+1
        lda #>sprite_back
        sta sprite_change_2+2
        
        lda #$03
        sta SPRITEACTIV
        lda #$28
        sta charpos                              
        lda #$08
        sta spr_counter
        rts 

sprite_set_rts:        
; **********************
; ** setze RTS
; **********************
        lda #<sprite_set_rts_exit
        sta sprite_change_2+1
        lda #>sprite_set_rts_exit
        sta sprite_change_2+2
        lda #$00
        sta SPRITEACTIV ;Sprites abschalten
sprite_set_rts_exit
        rts

; **********************
spr_counter !byte 08
charpos     !byte 00

!src "loading2.a"

raster_set_space:
; **********************
; ** setze 'Warten auf Space'
; **********************
        lda #<wait_space
        sta sprite_change_2+1
        lda #>wait_space
        sta sprite_change_2+2
        lda #$00
        sta SPRITEACTIV
        rts

wait_space:
; **********************
; ** Warten auf Space
; **********************
        lda #$7f       ; detect space bar
        sta $dc00
        lda $dc01
        and #$10
        bne +
        jmp sprite_set_back        
+       rts


; **********************
start
RASTER          = $6f                ;Hier den 1. Raster-IRQ auslösen
 
        jsr $e544                          ;Bildschirm löschen
        +SetBorderColor 14
        +SetBackgroundColor 6
        
        sei                                ;IRQs sperren
        lda #<myIRQ                        ;Adresse unserer Routine in
        sta $0314                          ;den RAM-Vektor
        lda #>myIRQ
        sta $0315
        lda #%00000001                     ;Raster-IRQs vom VIC-II aktivieren
        sta $d01a
        lda #RASTER                        ;Hier soll unsere Linie erscheinen
        sta $d012                      
        lda $d011                          ;Zur Sicherheit höchste BIT
        and #%01111111                     ;für die Rasterzeile löschen
        sta $d011
        lda #%01111111                     ;Timer-IRQs abschalten
        sta $dc0d
        lda $dc0d
        lda #%0000001                      ;evtl. aktiven Raster-IRQ bestätigen
        sta $d019
        cli 
                          
        jmp *
 
;*** an Pagegrenze ausrichten, damit die Sprünge passen
!align 255,0
 
myIRQ
        lda #<doubleIRQ                    ;(2 TZ) 2. Raster-IRQ einrichten
        sta $0314                          ;(4 TZ)
        lda #>doubleIRQ                    ;(2 TZ)
        sta $0315                          ;(4 TZ)
        tsx                                ;(2 TZ) Stackpointer im X-Reg. retten
        stx doubleIRQ+1                    ;(4 TZ) und fürs zurückholen sichern!
        nop                                ;(2 TZ)
        nop                                ;(2 TZ)
        nop                                ;(2 TZ)
        lda #%00000001                     ;(2 TZ) 1. Raster-IRQ später bestätigen
 
        inc $d012                          ;(6 TZ) 2. IRQ in der übernächsten Zeile (RASTER+2)!!!
        sta $d019                          ;(4 TZ) IRQ bestätigen
        cli                                ;(2 TZ) Interrupts für den 2. Raster-IRQ
 
        ldx #$08                           ;            2 TZ
        dex                                ;8 * 2 TZ = 16 TZ
        bne *-1                            ;7 * 3 TZ = 21 TZ
 
        nop
        nop
        nop
        nop
        nop
        nop
 
doubleIRQ
        ldx #$00                           ;(2 TZ) Platzhalter für 1. Stackpointer
        txs                                ;(2 TZ) Stackpointer vom 1. IRQ wiederherstellen
        nop                                ;(2 TZ)
        nop                                ;(2 TZ)
        nop                                ;(2 TZ)
        nop                                ;(2 TZ)
        bit $01                            ;(3 TZ)
        ldx $D012                          ;(4 TZ)
        lda #$01                           ;(2 TZ) weiß schonmal in den Akku
        cpx $D012                          ;(4 TZ) sind wir noch in Rasterzeile 22?
 
        beq myIRQMain                      ;(3 TZ) wenn JA einen letzten Takt 'verschwenden'
 
myIRQMain
        ldx #$ff                           ;X mit -1 initialisieren, da gleich INX folgt!
nextColor
        inx                                ;Schleifenzähler erhöhen
        ldy delaytable,X                   ;Wartezeit holen
        dey                                ;verringern
        bne *-1                            ;solange größer 0 zurück zum DEY
        lda rowcolortable,X                ;Farbe holen
        sta $d021                          ;und ins Register für die Hintergrundfarbe
        ;nop                                ;ahhhh einfach mal nichts 'tun'
        cpx #$44
        bne nextColor                      ;solange die Farbe positiv ist -> @loop
        +SetBackgroundColor 6
        lda #<myIRQ                        ;Original IRQ-Vektor setzen
        sta $0314
        lda #>myIRQ
        sta $0315
 
        lda #RASTER
        sta $d012
 
        lda #%00000001                     ;IRQ bestätigen
        sta $d019
sprite_change
        jsr color_move
        jmp $ea81                          ;zum Ende des 'Timer-Interrupts' springen

set_new_irq:
        lda #$15        ; Kleinbuchstaben
        sta $d018
        
        jsr screen_init ; Bildschirm vorbereiten
        jsr sprite_init ; Sprites vorbereiten
        jsr sprite_set  ; Sprites einschalten        
        ; register first interrupt
        sei
        lda #$7f
        sta $dc0d     ; turn off the CIA interrupts
        sta $dc0d
        and $d011     ; clear high bit of raster line
        sta $d011
        +irqEnd $70, irq1
        lda #$01                ; enable raster interrupts
        sta $d01a
        cli
forever jmp forever
        
; ************************************************
; ** IRQ Routinen                               **
; ************************************************
irq1:
        lda #$02
        jsr delay
        +SetBorderColor 14
        +SetBackgroundColor 1
        ldx #$08
        dex
        bne *-1
        +SetBackgroundColor 0
        +irqEnd $B2, irq2
        inc $d019     ; acknowledge interrupt
        jmp $ea31
        
irq2:
        lda #$02
        jsr delay
        +SetBorderColor 14
        +SetBackgroundColor 1
        ldx #$0C
        dex
        bne *-1
        +SetBackgroundColor 6
sprite_change_2        
        jsr sprite_move ; Einblenden
        +irqEnd $70, irq1
        inc $d019     ; acknowledge interrupt
        jmp $ea31


dela    !byte 00 
tabcount    !byte 00

color_move
        ldx dela
        inx
        stx dela
        cpx #$04
        beq col_mov
        rts
        
col_mov ldx #$00
        stx dela
        ldx tabcount
        inx
        stx tabcount
        cpx #$22
        bne cont1
        jmp set_new_irq
cont1:
        ldx #$00
-       lda rowcolor1+$02,x        
        sta rowcolortable,x        
        inx
        cpx #$22
        bne -

        ldx #$00
-       lda rowcolor2,x
        sta rowcolortable+$22,x
        inx
        cpx #$22
        bne -
        jsr copy_tabs
        rts

;umkopieren der Tabellen
copy_tabs:
        ldx #$00
-       lda rowcolor1+1,x
        sta rowcolor1,x
        inx
        cpx #$22
        bne -
        lda #$00
        sta rowcolor1+$22
        
        ldx #$22
-       lda rowcolor2,x
        sta rowcolor2+1,x
        dex
        bpl -
        lda #$00
        sta rowcolor2
        rts
        
        
!align 255,0
rowcolortable !fill $50,0

rowcolor1
        !byte 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
        !byte 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6

;            70,71,72,73,74,75,76,77,78,79,7a,7b,7c,7d,7e,7f
        !byte 6, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        !byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        !byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        !byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
rowcolor2        
        !byte 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
        !byte 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
        !byte 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
        !byte 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
        !byte 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
        !byte $f6
 
 
!align 255,0
delaytable
 !byte 9                            ;letzte Zeile vor der Anzeige        
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ; 1. Textzeile
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ; 2. 
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ; 3. 
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ; 4. 
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ; 5. 
 
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ; 6. 
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ; 7. 
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ; 8. 
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ; 9. 
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;10. Textzeile
 
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;11.
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ;12.
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ;13.
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;14.
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;15.
 
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;16.
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ;17.
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ;18.
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;19.
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;20. Textzeile
 
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;21.
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ;22.
 !byte 2, 8, 8, 9, 9, 9, 9, 10      ;23.
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;24.
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;25. Textzeile
 
 !byte 2, 8, 8, 9, 9, 9, 9, 9       ;26. 'Sicherheitszeile'

!align 63,0
sprite1
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte %11111111,%11111111,%11111111
        !byte $00

